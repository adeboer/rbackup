#!/usr/bin/perl -w

#    rbackup - do backups over rsync
#
#    Copyright (C) 2000-2004,2015 Anthony de Boer
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License as
#    published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use strict;
use Getopt::Std;

my %opts;
getopts('v', \%opts) || die "Usage: [-v] [dir]\n";

my $dir = shift(@ARGV) || '.';
chdir($dir) || die "Cannot cd $dir: $!\n";

open(W, "whence") || die "Cannot open $dir\/whence: $!\n";
undef($/);
$_ = <W>;
my @whence = split(/\s+/);
unshift (@whence, '-essh') unless /\:\:/;
close(W);

my ($sec,$min,$hour,$mday,$mon,$year,undef,undef,undef) = localtime(time);
my $when = sprintf("%04d%02d%02d-%02d%02d-%02d%d", $year+1900, $mon+1, $mday, $hour, $min, $sec, $$);
my $current = '../current';
my @tx;

my @rp = qw/rpurge -w/;
if ($opts{'v'}) {
	push (@rp, "-v");
	print STDERR join(" ", "+", @rp), "\n";
}
system(@rp) && die "rpurge failed\n";

if (-d 'old') {
	$when = "old/$when";
	$current = "../$current";
	@tx = (<old/work.*>, "old/work.new");
} else {
	@tx = (<work.*>, "work.init");
}

my $target = shift(@tx);

my @rcmd = qw/rsync -aH --delete/;
push (@rcmd, '-v') if $opts{'v'};
push (@rcmd, '--link-dest', $current) if -d 'current';
push (@rcmd, @whence, "$target/");
print STDERR join(' ', '+', @rcmd), "\n" if $opts{'v'};
if (system(@rcmd)) {
	die "rsync failed\n";
} else {
	print STDERR "+ rename($target, $when)\n" if $opts{'v'};
	rename($target, $when) || die "Cannot rename $target to $when: $!\n";
	print STDERR "+ symlink($when, sym.$$)\n" if $opts{'v'};
	symlink($when, "sym.$$") || die "Cannot create symlink: $!\n";
	if (-e "current" && ! -l "current") {
		# old style, update it should be only once
		print STDERR "+ rename(current, $target)\n" if $opts{'v'};
		rename("current", $target) || die "Cannot rename current to $target: $!\n";
	}
	print STDERR "+ rename(sym.$$, current)\n" if $opts{'v'};
	rename("sym.$$", "current") || die "Cannot rename sym.$$ to current: $!\n";
}
